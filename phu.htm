<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HAR Casino G98 Club - Macau Edition</title>
    <!-- Tải Tailwind CSS để tạo kiểu dáng hiện đại -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Tải Supabase client -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <!-- Sử dụng phông chữ Inter từ Google Fonts cho nội dung chính -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <!-- Tải phông chữ Cinzel cho tiêu đề sòng bài -->
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@700&family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            color: #d1d5db; /* gray-300 */
        }
        .casino-title {
            font-family: 'Cinzel', serif;
        }
        /* Hiệu ứng mượt mà khi hover */
        .input-group:hover .input-label {
            color: #facc15; /* yellow-400 */
        }
        .input-group:hover .input-field {
            border-color: #facc15; /* yellow-400 */
        }
        /* Tạo hiệu ứng nhấp nháy cho nút micro khi đang ghi âm */
        .speech-to-text-btn.recording {
            color: #ef4444; /* red-500 */
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.2); opacity: 0.7; }
        }
        /* Thêm hiệu ứng chuyển đổi màu nền mượt mà */
        .input-field {
            transition: background-color 0.3s ease, border-color 0.3s ease;
        }
        
        /* Hiệu ứng chuyển màu vàng rực rỡ cho tiêu đề */
        .gradient-text {
            background-image: linear-gradient(45deg, #f59e0b, #facc15, #eab308, #f59e0b);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            animation: gradient-animation 6s ease infinite, glow-animation 2s ease-in-out infinite alternate;
            background-size: 300% 300%;
        }

        @keyframes gradient-animation {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        /* Hiệu ứng phát sáng kiểu đèn neon nổi bật hơn */
        @keyframes glow-animation {
            from {
                text-shadow: 
                    -1px -1px 1px #000, 1px -1px 1px #000, -1px 1px 1px #000, 1px 1px 1px #000,
                    0 0 5px #fff, 0 0 10px #fff, 0 0 15px #fde047, 0 0 20px #facc15,
                    0 0 25px #eab308, 0 0 30px #ca8a04, 0 0 40px #b45309;
            }
            to {
                text-shadow: 
                    -1px -1px 1px #000, 1px -1px 1px #000, -1px 1px 1px #000, 1px 1px 1px #000,
                    0 0 10px #fff, 0 0 20px #fde047, 0 0 30px #facc15, 0 0 40px #eab308,
                    0 0 50px #ca8a04, 0 0 60px #a16207, 0 0 75px #b45309;
            }
        }
        /* Nền hoa văn đỏ đậm sang trọng kiểu Macau */
        .macau-bg {
            background-color: #1a0000; /* Màu nền dự phòng đỏ đậm */
            background-image: url('https://www.toptal.com/designers/subtlepatterns/uploads/dark_embroidery.png');
            background-repeat: repeat;
        }
        /* Nút bấm có hiệu ứng chuyển màu vàng */
        .gold-button {
            background-image: linear-gradient(to right, #ca8a04, #facc15, #ca8a04);
            background-size: 200% auto;
            transition: background-position 0.5s;
            color: #422006; /* Chữ màu nâu đậm */
        }
        .gold-button:hover {
            background-position: right center;
        }
    </style>
</head>
<body class="flex items-start justify-center min-h-screen px-4 py-12">

    <!-- Modal khởi động để kích hoạt âm thanh -->
    <div id="startupModal" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 backdrop-blur-sm">
        <div class="bg-gray-900 border-2 border-yellow-500/50 p-8 rounded-2xl shadow-xl text-center mx-4">
            <h2 class="text-2xl font-bold mb-4 casino-title gradient-text" style="animation: none; -webkit-text-fill-color: initial; color: #facc15;">Chào Mừng Tới HAR Casino</h2>
            <p class="text-gray-400 mb-6">Nhấn "Bắt đầu" để vào sòng và kích hoạt âm thanh.</p>
            <button id="startButton" class="gold-button font-bold py-3 px-8 rounded-lg text-lg transform hover:scale-105">
                Bắt đầu
            </button>
        </div>
    </div>

    <!-- Modal đăng nhập Admin -->
    <div id="adminLoginModal" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 backdrop-blur-sm hidden">
        <div class="bg-gray-900 border-2 border-yellow-500/50 p-8 rounded-2xl shadow-xl text-left mx-4 w-full max-w-sm relative">
             <button id="closeLoginModal" class="absolute top-2 right-3 text-white text-2xl font-bold">&times;</button>
            <h2 class="text-2xl font-bold mb-6 text-center casino-title text-yellow-400">Đăng Nhập Admin</h2>
            <form id="adminLoginForm">
                <div class="mb-4">
                    <label for="username" class="block text-sm font-medium text-gray-300 mb-1">Tên người dùng</label>
                    <input type="text" id="username" class="w-full p-2 rounded-md bg-gray-800 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
                </div>
                <div class="mb-6">
                    <label for="password" class="block text-sm font-medium text-gray-300 mb-1">Mật khẩu</label>
                    <input type="password" id="password" class="w-full p-2 rounded-md bg-gray-800 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
                </div>
                <button type="submit" class="gold-button w-full font-bold py-2 px-4 rounded-lg">Đăng Nhập</button>
                <p id="loginError" class="text-red-500 text-center text-sm mt-4"></p>
            </form>
        </div>
    </div>

    <!-- Modal Lỗi Bảo Mật Supabase (RLS) -->
    <div id="rlsErrorModal" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 backdrop-blur-sm hidden">
        <div class="bg-red-900 border-2 border-red-500/50 p-8 rounded-2xl shadow-xl text-left mx-4 w-full max-w-2xl relative">
            <button id="closeRlsErrorModal" class="absolute top-2 right-3 text-white text-2xl font-bold">&times;</button>
            <h2 class="text-2xl font-bold mb-4 text-center casino-title text-yellow-300">Lỗi Cấu Hình Bảo Mật Supabase</h2>
            <p class="text-gray-200 mb-4">
                Ứng dụng không thể thực hiện thao tác với cơ sở dữ liệu. Đây là lỗi cài đặt trên Supabase, không phải lỗi code.
            </p>
            <p class="text-gray-200 mb-4 font-bold">
                Vui lòng vào trang quản trị Supabase và đảm bảo các Chính sách (Policies) sau đã được tạo:
            </p>
            <ul class="list-disc list-inside text-gray-200 space-y-2">
                <li>Bảng <strong>game_rounds</strong>: Cần policy cho phép <strong>INSERT</strong>, <strong>SELECT</strong>, và <strong>DELETE</strong>.</li>
                <li>Bảng <strong>admin_settings</strong>: Cần policy cho phép <strong>SELECT</strong> và <strong>UPDATE/INSERT</strong>.</li>
            </ul>
        </div>
    </div>

    <!-- Modal Xác nhận Xóa -->
    <div id="deleteConfirmModal" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 backdrop-blur-sm hidden">
        <div class="bg-gray-900 border-2 border-red-500/50 p-8 rounded-2xl shadow-xl text-center mx-4 w-full max-w-md">
            <h2 class="text-xl font-bold mb-4 text-yellow-300">Bạn có chắc chắn?</h2>
            <p class="text-gray-300 mb-6">Bạn có muốn xóa toàn bộ lịch sử ván đấu không? Hành động này không thể hoàn tác.</p>
            <div class="flex justify-center gap-4">
                <button id="cancelDeleteButton" class="bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-6 rounded-lg">Hủy</button>
                <button id="confirmDeleteButton" class="bg-red-800 hover:bg-red-700 text-white font-bold py-2 px-6 rounded-lg">Xóa</button>
            </div>
        </div>
    </div>
    
    <!-- Container riêng cho hình nền và lớp phủ -->
    <div class="fixed inset-0 -z-10 macau-bg">
        <div class="absolute inset-0 bg-black/50"></div>
    </div>
    
    <!-- Wrapper để căn giữa nội dung -->
    <div class="relative bg-black/80 backdrop-blur-sm border-2 border-yellow-500/50 p-8 md:p-12 rounded-3xl shadow-2xl w-full max-w-4xl text-center">
        
        <!-- Nút Admin -->
        <div class="absolute top-4 right-4">
            <button id="adminButton" class="bg-gray-700 hover:bg-gray-600 text-white font-bold py-1 px-3 rounded-lg text-xs">
                Admin
            </button>
        </div>

        <h1 class="text-4xl md:text-5xl font-bold mb-2 gradient-text casino-title">
            <span class="text-xl md:text-2xl text-yellow-400 align-middle">♦</span>
            HAR CASINO G98 CLUB
            <span class="text-xl md:text-2xl text-red-500 align-middle">♥</span>
        </h1>
        <p class="text-gray-400 text-xs md:text-sm mb-8">
            Dữ liệu được đồng bộ hoá thời gian thực.
        </p>

        <!-- Container chứa các hàng nhập liệu -->
        <div id="inputRowsContainer">
            <!-- Hàng nhập liệu ban đầu 1 -->
            <div class="input-row flex flex-col sm:flex-row gap-4 mb-4 items-center sm:items-end">
                <div class="status-indicator w-8 h-8 bg-gray-700 rounded-full flex-shrink-0 transition-colors duration-300 sm:mb-5 shadow-inner"></div>
                <div class="flex-1 input-group transition duration-300">
                    <label class="input-label block text-center text-4xl font-semibold text-yellow-400 mb-2 transition duration-300">Vi</label>
                    <div class="relative">
                        <input type="number" step="5" class="input-field w-full p-4 pr-16 text-4xl text-center border rounded-xl focus:outline-none focus:ring-2 bg-yellow-100 text-gray-900 border-gray-300 focus:ring-yellow-500 focus:border-yellow-500" placeholder="0">
                        <button type="button" class="speech-to-text-btn absolute inset-y-0 right-0 flex items-center pr-4 text-gray-500 hover:text-yellow-400 focus:outline-none">
                            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20"><path d="M7 4a3 3 0 016 0v6a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8h-1a6 6 0 11-12 0H3a7.001 7.001 0 006 6.93V17H7v1h6v-1h-2v-2.07z"></path></svg>
                        </button>
                    </div>
                </div>
                <div class="flex-1 input-group transition duration-300">
                    <label class="input-label block text-center text-4xl font-semibold text-yellow-400 mb-2 transition duration-300">Phú</label>
                    <div class="relative">
                        <input type="number" step="5" class="input-field w-full p-4 pr-16 text-4xl text-center border rounded-xl focus:outline-none focus:ring-2 bg-yellow-100 text-gray-900 border-gray-300 focus:ring-yellow-500 focus:border-yellow-500" placeholder="0">
                        <button type="button" class="speech-to-text-btn absolute inset-y-0 right-0 flex items-center pr-4 text-gray-500 hover:text-yellow-400 focus:outline-none">
                            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20"><path d="M7 4a3 3 0 016 0v6a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8h-1a6 6 0 11-12 0H3a7.001 7.001 0 006 6.93V17H7v1h6v-1h-2v-2.07z"></path></svg>
                        </button>
                    </div>
                </div>
                <div class="flex-1 input-group transition duration-300">
                    <label class="input-label block text-center text-4xl font-semibold text-yellow-400 mb-2 transition duration-300">Uyên</label>
                    <input type="number" class="input-field w-full p-4 text-4xl text-center border rounded-xl focus:outline-none bg-yellow-100 text-gray-900 border-gray-300" placeholder="0" readonly>
                </div>
            </div>
            <!-- Hàng nhập liệu ban đầu 2 -->
            <div class="input-row flex flex-col sm:flex-row gap-4 mb-4 items-center sm:items-end">
                <div class="status-indicator w-8 h-8 bg-gray-700 rounded-full flex-shrink-0 transition-colors duration-300 sm:mb-5 shadow-inner"></div>
                <div class="flex-1 input-group transition duration-300">
                    <label class="input-label block text-center text-4xl font-semibold text-yellow-400 mb-2 transition duration-300">Vi</label>
                    <div class="relative">
                        <input type="number" step="5" class="input-field w-full p-4 pr-16 text-4xl text-center border rounded-xl focus:outline-none focus:ring-2 bg-yellow-100 text-gray-900 border-gray-300 focus:ring-yellow-500 focus:border-yellow-500" placeholder="0">
                        <button type="button" class="speech-to-text-btn absolute inset-y-0 right-0 flex items-center pr-4 text-gray-500 hover:text-yellow-400 focus:outline-none">
                            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20"><path d="M7 4a3 3 0 016 0v6a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8h-1a6 6 0 11-12 0H3a7.001 7.001 0 006 6.93V17H7v1h6v-1h-2v-2.07z"></path></svg>
                        </button>
                    </div>
                </div>
                <div class="flex-1 input-group transition duration-300">
                    <label class="input-label block text-center text-4xl font-semibold text-yellow-400 mb-2 transition duration-300">Phú</label>
                    <div class="relative">
                        <input type="number" step="5" class="input-field w-full p-4 pr-16 text-4xl text-center border rounded-xl focus:outline-none focus:ring-2 bg-yellow-100 text-gray-900 border-gray-300 focus:ring-yellow-500 focus:border-yellow-500" placeholder="0">
                        <button type="button" class="speech-to-text-btn absolute inset-y-0 right-0 flex items-center pr-4 text-gray-500 hover:text-yellow-400 focus:outline-none">
                            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20"><path d="M7 4a3 3 0 016 0v6a3 3> 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8h-1a6 6 0 11-12 0H3a7.001 7.001 0 006 6.93V17H7v1h6v-1h-2v-2.07z"></path></svg>
                        </button>
                    </div>
                </div>
                <div class="flex-1 input-group transition duration-300">
                    <label class="input-label block text-center text-4xl font-semibold text-yellow-400 mb-2 transition duration-300">Uyên</label>
                    <input type="number" class="input-field w-full p-4 text-4xl text-center border rounded-xl focus:outline-none bg-yellow-100 text-gray-900 border-gray-300" placeholder="0" readonly>
                </div>
            </div>
        </div>
        
        <!-- Bảng điều khiển Admin -->
        <div id="adminControls" class="hidden mt-8 p-4 bg-yellow-900/20 border border-yellow-500/30 rounded-lg">
             <h3 class="text-lg font-bold text-yellow-400 mb-4">Bảng Điều Khiển Admin</h3>
             <div class="flex flex-col sm:flex-row items-center gap-4 flex-wrap">
                 <button id="clearHistoryButton" class="bg-red-800 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">
                    Xoá Lịch Sử
                 </button>
                 <div class="flex items-center gap-2">
                    <label for="historyLimitInput" class="text-sm text-gray-300 whitespace-nowrap">Số ván hiển thị:</label>
                    <input type="number" id="historyLimitInput" min="1" class="bg-gray-800 text-white p-1 rounded-md w-20 text-center border border-gray-600 focus:outline-none focus:ring-2 focus:ring-yellow-500">
                    <button id="saveHistoryLimitButton" class="bg-blue-700 hover:bg-blue-600 text-white font-bold py-1 px-3 rounded-lg text-xs">Lưu</button>
                 </div>
             </div>
        </div>


        <!-- Khu vực hiển thị lịch sử dạng bảng -->
        <div class="mt-8">
            <h2 class="text-xl font-semibold text-yellow-400 mb-4 uppercase tracking-wider">LỊCH SỬ VÁN ĐẤU</h2>
            <div class="max-h-60 overflow-y-auto bg-black/30 rounded-lg p-1 border border-yellow-500/20">
                <table class="w-full text-3xl">
                    <thead class="text-yellow-300 uppercase bg-yellow-800/20 sticky top-0 backdrop-blur-sm">
                        <tr>
                            <th scope="col" class="px-6 py-4 w-24 text-center">Ván</th>
                            <th scope="col" class="px-6 py-4 text-center text-base">Thời Gian</th>
                            <th scope="col" class="px-6 py-4 text-center">Vi</th>
                            <th scope="col" class="px-6 py-4 text-center">Phú</th>
                            <th scope="col" class="px-6 py-4 text-center">Uyên</th>
                        </tr>
                    </thead>
                    <tbody id="historyTableBody">
                        <!-- Các hàng lịch sử sẽ được chèn vào đây bởi JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script type="module">
        const { createClient } = supabase;

        // App Globals
        const startupModal = document.getElementById('startupModal');
        const startButton = document.getElementById('startButton');
        const inputRowsContainer = document.getElementById('inputRowsContainer');
        let vietnameseVoice = null;
        let audioCtx = null;
        let recognition;
        let activeInput = null;
        let activeMicButton = null;

        // Admin Globals
        const adminButton = document.getElementById('adminButton');
        const adminLoginModal = document.getElementById('adminLoginModal');
        const closeLoginModal = document.getElementById('closeLoginModal');
        const adminLoginForm = document.getElementById('adminLoginForm');
        const loginError = document.getElementById('loginError');
        const adminControls = document.getElementById('adminControls');
        const clearHistoryButton = document.getElementById('clearHistoryButton');
        const rlsErrorModal = document.getElementById('rlsErrorModal');
        const closeRlsErrorModal = document.getElementById('closeRlsErrorModal');
        const deleteConfirmModal = document.getElementById('deleteConfirmModal');
        const confirmDeleteButton = document.getElementById('confirmDeleteButton');
        const cancelDeleteButton = document.getElementById('cancelDeleteButton');
        const historyLimitInput = document.getElementById('historyLimitInput');
        const saveHistoryLimitButton = document.getElementById('saveHistoryLimitButton');

        // --- SUPABASE & DATA ---
        let supabaseClient;
        let historyLimit = 50; // Default value, will be overwritten from Supabase
        
        const supabaseUrl = 'https://ztvdxwndvfnftzcnddhh.supabase.co'; // <-- DÁN PROJECT URL CỦA BẠN VÀO ĐÂY
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp0dmR4d25kdmZuZnR6Y25kZGhoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMTI1MjAsImV4cCI6MjA3MTc4ODUyMH0.VMPnrKLzhnWGmGfxC1So3Fe7yvt4thcs4Sa_asuLYH8'; // <-- DÁN ANON KEY CỦA BẠN VÀO ĐÂY

        async function initializeSupabase() {
            if (!supabaseUrl || !supabaseKey || supabaseUrl.includes('YOUR_SUPABASE_URL')) {
                console.error("Supabase URL hoặc Key chưa được cấu hình. Vui lòng cập nhật trong code.");
                alert("Lỗi: Supabase URL hoặc Key chưa được cấu hình. Vui lòng kiểm tra lại trong code.");
                return;
            }
            try {
                supabaseClient = createClient(supabaseUrl, supabaseKey);
                console.log("Supabase initialized.");
                await fetchHistoryLimit(); // Fetch setting before fetching history
                setupSupabaseListener(); 
            } catch (error) {
                console.error("Supabase initialization failed:", error);
            }
        }

        async function fetchHistoryLimit() {
            if (!supabaseClient) return;
            try {
                const { data, error } = await supabaseClient
                    .from('admin_settings')
                    .select('setting_value')
                    .eq('setting_name', 'historyLimit')
                    .single();

                if (error && error.code !== 'PGRST116') { // PGRST116 means no rows found
                    throw error;
                }
                if (data) {
                    historyLimit = parseInt(data.setting_value);
                }
                historyLimitInput.value = historyLimit; // Update input field with value from DB or default
            } catch (error) {
                console.error("Lỗi khi tải thiết lập số ván hiển thị:", error);
                if (error.code === '42P01') {
                    alert("Lỗi: Bảng 'admin_settings' không tồn tại. Vui lòng tạo bảng này trong Supabase.");
                }
            }
        }

        async function saveHistoryLimitToSupabase(newLimit) {
            if (!supabaseClient) return;
            try {
                const { error } = await supabaseClient
                    .from('admin_settings')
                    .upsert({ setting_name: 'historyLimit', setting_value: newLimit });

                if (error) throw error;
                return true; // Indicate success
            } catch (error) {
                console.error("Lỗi khi lưu thiết lập số ván hiển thị:", error);
                if (error.code === '42501') {
                    rlsErrorModal.classList.remove('hidden');
                } else {
                    alert("Đã xảy ra lỗi khi lưu thiết lập. Vui lòng xem console.");
                }
                return false; // Indicate failure
            }
        }

        async function fetchAndDisplayHistory() {
            if (!supabaseClient) return;
            try {
                let { data: game_rounds, error } = await supabaseClient
                    .from('game_rounds')
                    .select('*');

                if (error) {
                    if (error.code === '42501') {
                         rlsErrorModal.classList.remove('hidden');
                    } else {
                        throw error;
                    }
                }
                
                if (game_rounds) updateHistoryTable(game_rounds);

            } catch(error) {
                console.error('Lỗi khi tải lịch sử:', error);
                if (error.message && error.message.includes("Invalid API key")) {
                    alert("Lỗi: Khóa API của Supabase không hợp lệ. Vui lòng kiểm tra lại trong code.");
                }
            }
        }

        function setupSupabaseListener() {
            if (!supabaseClient) return;
            fetchAndDisplayHistory();
            const channel = supabaseClient.channel('public:game_rounds')
                .on('postgres_changes', { event: '*', schema: 'public', table: 'game_rounds' }, payload => {
                    console.log('Phát hiện thay đổi!', payload);
                    fetchAndDisplayHistory();
                })
                .subscribe();
        }

        function updateHistoryTable(rounds) {
            const tableBody = document.getElementById('historyTableBody');
            tableBody.innerHTML = ''; 

            if (!rounds || rounds.length === 0) return;
            
            const sortedHistory = [...rounds].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const displayHistory = sortedHistory.slice(0, historyLimit);

            displayHistory.forEach((round) => {
                const viValue = round.vi ?? '0';
                const phuValue = round.phu ?? '0';
                const uyenValue = round.uyen ?? '0';
                const formattedTime = formatDateTime(new Date(round.created_at));

                const tableRow = document.createElement('tr');
                tableRow.className = 'bg-gray-900/50 border-b border-gray-700 hover:bg-gray-800/50';
                const roundNumber = sortedHistory.length - (sortedHistory.indexOf(round));
                tableRow.innerHTML = `
                    <td class="px-6 py-4 text-center font-medium text-gray-200">${roundNumber}</td>
                    <td class="px-6 py-4 text-center text-base text-gray-400 whitespace-nowrap">${formattedTime}</td>
                    <td class="px-6 py-4 text-center ${parseFloat(viValue) < 0 ? 'text-red-500 font-bold' : 'text-gray-200'}">${viValue}</td>
                    <td class="px-6 py-4 text-center ${parseFloat(phuValue) < 0 ? 'text-red-500 font-bold' : 'text-gray-200'}">${phuValue}</td>
                    <td class="px-6 py-4 text-center font-bold ${parseFloat(uyenValue) < 0 ? 'text-red-500' : 'text-gray-200'}">${uyenValue}</td>
                `;
                tableBody.appendChild(tableRow);
            });
        }

        async function saveRoundToSupabase(vi, phu, uyen) {
            if (!supabaseClient) {
                console.error("Supabase chưa được khởi tạo.");
                return;
            }
            try {
                const { error } = await supabaseClient
                    .from('game_rounds')
                    .insert([{ vi, phu, uyen }]);
                if (error) throw error;
            } catch (error) {
                console.error("Lỗi khi ghi dữ liệu vào Supabase: ", error);
                if (error.code === '42501') {
                    rlsErrorModal.classList.remove('hidden');
                }
            }
        }
        
        // --- ADMIN FUNCTIONS ---
        async function clearHistory() {
            if (!supabaseClient) return;
            try {
                const { error } = await supabaseClient
                    .from('game_rounds')
                    .delete()
                    .gt('id', -1);

                if (error) throw error;
                console.log("Lịch sử đã được xóa thành công.");
            } catch (error) {
                 console.error("Lỗi khi xóa lịch sử: ", error);
                 if (error.code === '42501') {
                    rlsErrorModal.classList.remove('hidden');
                }
            }
        }
        
        function setupAdminControls() {
            adminButton.addEventListener('click', () => adminLoginModal.classList.remove('hidden'));
            closeLoginModal.addEventListener('click', () => adminLoginModal.classList.add('hidden'));
            closeRlsErrorModal.addEventListener('click', () => rlsErrorModal.classList.add('hidden'));

            adminLoginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const { username, password } = e.target.elements;
                if (username.value === 'admin' && password.value === 'admin') {
                    adminLoginModal.classList.add('hidden');
                    adminControls.classList.remove('hidden');
                    adminButton.classList.add('hidden');
                    loginError.textContent = '';
                    e.target.reset();
                } else {
                    loginError.textContent = 'Tên người dùng hoặc mật khẩu không đúng.';
                }
            });

            clearHistoryButton.addEventListener('click', () => deleteConfirmModal.classList.remove('hidden'));
            cancelDeleteButton.addEventListener('click', () => deleteConfirmModal.classList.add('hidden'));
            confirmDeleteButton.addEventListener('click', () => {
                clearHistory();
                deleteConfirmModal.classList.add('hidden');
            });
            
            saveHistoryLimitButton.addEventListener('click', async () => {
                const newLimit = parseInt(historyLimitInput.value);
                if (!isNaN(newLimit) && newLimit > 0) {
                    const success = await saveHistoryLimitToSupabase(newLimit);
                    if (success) {
                        historyLimit = newLimit;
                        fetchAndDisplayHistory(); // Refresh the view with the new limit
                        
                        // UI Feedback
                        saveHistoryLimitButton.textContent = 'Đã Lưu!';
                        saveHistoryLimitButton.classList.replace('bg-blue-700', 'bg-green-600');
                        saveHistoryLimitButton.classList.replace('hover:bg-blue-600', 'hover:bg-green-500');
                        setTimeout(() => {
                            saveHistoryLimitButton.textContent = 'Lưu';
                            saveHistoryLimitButton.classList.replace('bg-green-600', 'bg-blue-700');
                            saveHistoryLimitButton.classList.replace('hover:bg-green-500', 'hover:bg-blue-600');
                        }, 2000);
                    }
                } else {
                    alert('Vui lòng nhập một số hợp lệ lớn hơn 0.');
                }
            });
        }

        // --- SPEECH & AUDIO ---
        document.addEventListener('DOMContentLoaded', () => {
            startButton.addEventListener('click', () => {
                const dummyUtterance = new SpeechSynthesisUtterance(' ');
                dummyUtterance.volume = 0;
                window.speechSynthesis.speak(dummyUtterance);
                if (window.speechSynthesis.onvoiceschanged !== undefined) {
                    window.speechSynthesis.onvoiceschanged = loadVoices;
                }
                loadVoices();
                audioCtx = new (window.AudioContext || window.webkitAudioContext)();
                startupModal.style.display = 'none';
                initializeSupabase();
            }, { once: true });

            const initialRows = document.querySelectorAll('.input-row');
            initialRows.forEach(row => setupRowLogic(row));
            setupAdminControls();
        });

        function loadVoices() {
            const voices = window.speechSynthesis.getVoices();
            vietnameseVoice = voices.find(voice => voice.lang === 'vi-VN');
            if (vietnameseVoice) console.log('Đã tìm thấy và tải giọng đọc tiếng Việt.');
            else if (voices.length > 0) console.warn('Không tìm thấy giọng đọc tiếng Việt chuyên dụng.');
        }

        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        if (SpeechRecognition) {
            recognition = new SpeechRecognition();
            recognition.continuous = false;
            recognition.lang = 'vi-VN';
            recognition.interimResults = false;
            recognition.maxAlternatives = 1;
            recognition.onstart = () => { if (activeMicButton) activeMicButton.classList.add('recording'); };
            recognition.onend = () => { if (activeMicButton) activeMicButton.classList.remove('recording'); activeInput = null; activeMicButton = null; };
            recognition.onerror = (event) => { console.error('Lỗi nhận dạng giọng nói:', event.error); if (activeMicButton) activeMicButton.classList.remove('recording');};
            recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                if (activeInput) {
                    const number = parseVietnameseNumber(transcript);
                    if (number !== null) {
                        activeInput.value = number;
                        activeInput.dispatchEvent(new Event('input', { bubbles: true }));
                        activeInput.dispatchEvent(new Event('blur', { bubbles: true }));
                    } else {
                        console.warn(`Không thể chuyển đổi "${transcript}" thành số.`);
                    }
                }
            };
        } else {
            console.warn('API Nhận dạng Giọng nói không được hỗ trợ trên trình duyệt này.');
        }

        // --- UTILITY FUNCTIONS ---
        function formatDateTime(date) {
            if (!date || isNaN(date)) return 'N/A';
            
            // Chuyển đổi sang múi giờ Việt Nam (UTC+7)
            const vietnamTime = new Date(date.getTime() + (7 * 60 * 60 * 1000));

            const hours = String(vietnamTime.getUTCHours()).padStart(2, '0');
            const minutes = String(vietnamTime.getUTCMinutes()).padStart(2, '0');
            const day = String(vietnamTime.getUTCDate()).padStart(2, '0');
            const month = String(vietnamTime.getUTCMonth() + 1).padStart(2, '0'); // Tháng bắt đầu từ 0
            
            return `${day}/${month} (${hours}:${minutes})`;
        }

        function parseVietnameseNumber(text) {
            text = text.toLowerCase().trim().replace(/,/g, '');
            const numericMatch = text.match(/^-?\d+/);
            if (numericMatch) return parseInt(numericMatch[0], 10);
            let isNegative = false;
            if (text.startsWith('âm')) { isNegative = true; text = text.substring(3).trim(); }
            text = text.replace(/ lăm/g, ' năm').replace(/ mốt/g, ' một').replace(/ ngàn/g, ' nghìn').replace(/ linh /g, ' ').replace(/ tư/g, ' bốn');
            const numberWords = {'không': 0, 'một': 1, 'hai': 2, 'ba': 3, 'bốn': 4, 'năm': 5, 'sáu': 6, 'bảy': 7, 'tám': 8, 'chín': 9};
            const parts = text.split(/\s+/);
            let total = 0, currentNumber = 0;
            for (const part of parts) {
                if (numberWords.hasOwnProperty(part)) { currentNumber += numberWords[part]; } 
                else if (part === 'mươi') { currentNumber = (currentNumber === 0 ? 1 : currentNumber) * 10; } 
                else if (part === 'mười') { currentNumber += 10; } 
                else if (part === 'trăm') { currentNumber = (currentNumber === 0 ? 1 : currentNumber) * 100; } 
                else if (part === 'nghìn') { currentNumber = (currentNumber === 0 ? 1 : currentNumber) * 1000; total += currentNumber; currentNumber = 0;}
            }
            total += currentNumber;
            if (total === 0 && !text.includes('không') && text !== '0') return null;
            return isNegative ? -total : total;
        }

        function setActiveRow(activeRow) {
            document.querySelectorAll('.input-row').forEach(row => {
                const inputsInRow = row.querySelectorAll('.input-field');
                const indicator = row.querySelector('.status-indicator');
                if (row === activeRow) {
                    inputsInRow.forEach(inp => { inp.classList.remove('bg-yellow-100'); inp.classList.add('bg-green-100'); });
                    if (row.dataset.completed !== 'true') { indicator.classList.remove('bg-gray-700'); indicator.classList.add('bg-yellow-500'); }
                } else {
                    inputsInRow.forEach(inp => { inp.classList.remove('bg-green-100'); inp.classList.add('bg-yellow-100'); });
                     if (row.dataset.completed !== 'true') { indicator.classList.remove('bg-yellow-500'); indicator.classList.add('bg-gray-700');}
                }
            });
        }
        
        function getPreviousScores() {
            const tableBody = document.getElementById('historyTableBody');
            if (tableBody.rows.length === 0) return { vi: 0, phu: 0, uyen: 0 };
            const cells = tableBody.rows[0].cells;
            return { vi: parseFloat(cells[1].textContent || '0'), phu: parseFloat(cells[2].textContent || '0'), uyen: parseFloat(cells[3].textContent || '0') };
        }

        function playSuccessBeep(callback) {
            if (!audioCtx || audioCtx.state === 'suspended') { if(audioCtx) audioCtx.resume(); }
            if (!audioCtx) { if (callback) callback(); return; }
            const now = audioCtx.currentTime, gainNode = audioCtx.createGain(), duration = 2.5, fundamental = 440, partials = [1, 2, 3.01, 4.2, 5.44, 6.79];
            gainNode.connect(audioCtx.destination); gainNode.gain.setValueAtTime(0.3, now); gainNode.gain.exponentialRampToValueAtTime(0.0001, now + duration);
            let lastOsc;
            partials.forEach((partial, index) => {
                const osc = audioCtx.createOscillator(), partialGain = audioCtx.createGain();
                osc.connect(partialGain); partialGain.connect(gainNode); osc.type = 'sine';
                osc.frequency.setValueAtTime(fundamental * partial, now); partialGain.gain.setValueAtTime(1 / (index + 1.5), now); 
                osc.start(now); osc.stop(now + duration); lastOsc = osc;
            });
            if (callback) lastOsc.onended = callback;
        }

        function setupRowLogic(row) {
            const [viPlayerInput, phuPlayerInput] = row.querySelectorAll('input[type="number"]:not([readonly])');
            const uyenPlayerInput = row.querySelector('input[readonly]');
            
            row.querySelectorAll('input[type="number"]:not([readonly])').forEach(input => input.addEventListener('focus', () => setActiveRow(row)));
            
            row.addEventListener('focusout', (e) => {
                if (!row.contains(e.relatedTarget)) {
                    const lastBlurredInput = e.target;
                    if (lastBlurredInput.matches('.input-field')) {
                        const currentValue = parseFloat(lastBlurredInput.value);
                        if (!isNaN(currentValue)) {
                            const roundedValue = Math.round(currentValue / 5) * 5;
                            if (currentValue !== roundedValue) { lastBlurredInput.value = roundedValue; lastBlurredInput.dispatchEvent(new Event('input', { bubbles: true })); }
                        } else {
                            lastBlurredInput.value = ''; lastBlurredInput.dispatchEvent(new Event('input', { bubbles: true }));
                        }
                    }

                    if (viPlayerInput.value !== '' && phuPlayerInput.value !== '') {
                        document.querySelectorAll('.input-row').forEach(otherRow => {
                            if (otherRow !== row) {
                                const otherIndicator = otherRow.querySelector('.status-indicator');
                                otherIndicator.classList.remove('bg-emerald-500', 'flex', 'items-center', 'justify-center');
                                otherIndicator.classList.add('bg-gray-700'); otherIndicator.innerHTML = ''; otherRow.dataset.completed = 'false';
                            }
                        });
                        const indicator = row.querySelector('.status-indicator');
                        indicator.classList.remove('bg-gray-700', 'bg-yellow-500');
                        indicator.classList.add('bg-emerald-500', 'flex', 'items-center', 'justify-center');
                        indicator.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="3"><path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" /></svg>`;
                        row.dataset.completed = 'true';
                        
                        const viValue = viPlayerInput.value || '0', phuValue = phuPlayerInput.value || '0', uyenValue = uyenPlayerInput.value || '0';
                        const nextVan = document.getElementById('historyTableBody').rows.length + 1;
                        const formatForSpeech = (num) => num.startsWith('-') ? `âm ${num.substring(1)}` : num;
                        let summaryText = `Ván ${nextVan}, Vi ${formatForSpeech(viValue)}, Phú ${formatForSpeech(phuValue)}, Uyên ${formatForSpeech(uyenValue)}`;
                        const previousScores = getPreviousScores(), returnedPlayers = [];
                        if (previousScores.vi < 0 && parseFloat(viValue) >= 0) returnedPlayers.push('Vi');
                        if (previousScores.phu < 0 && parseFloat(phuValue) >= 0) returnedPlayers.push('Phú');
                        if (previousScores.uyen < 0 && parseFloat(uyenValue) >= 0) returnedPlayers.push('Uyên');
                        if (returnedPlayers.length > 0) {
                            let announcementText = (returnedPlayers.length === 1) ? returnedPlayers[0] : `${returnedPlayers.slice(0, -1).join(', ')} và ${returnedPlayers.slice(-1)}`;
                            summaryText += `. Chúc mừng ${announcementText} đã thắng lớn ha ha`;
                        }

                        playSuccessBeep(() => {
                            window.speechSynthesis.cancel();
                            const utterance = new SpeechSynthesisUtterance(summaryText);
                            utterance.lang = 'vi-VN'; utterance.rate = 1.1; if (vietnameseVoice) utterance.voice = vietnameseVoice;
                            window.speechSynthesis.speak(utterance);
                        });
                        
                        saveRoundToSupabase(parseFloat(viValue), parseFloat(phuValue), parseFloat(uyenValue));

                        viPlayerInput.value = '';
                        phuPlayerInput.value = '';
                        uyenPlayerInput.value = '';
                        updateInputStyle(viPlayerInput);
                        updateInputStyle(phuPlayerInput);
                        updateInputStyle(uyenPlayerInput);

                    } else {
                         const indicator = row.querySelector('.status-indicator');
                         indicator.classList.remove('bg-emerald-500', 'bg-yellow-500'); indicator.classList.add('bg-gray-700');
                         row.dataset.completed = 'false';
                    }
                }
            });

            if (SpeechRecognition) {
                row.querySelectorAll('.speech-to-text-btn').forEach(btn => {
                    const associatedInput = btn.closest('.relative').querySelector('input');
                    btn.addEventListener('click', () => {
                        if (activeMicButton === btn) { recognition.stop(); return; }
                        if (activeMicButton) recognition.stop();
                        activeInput = associatedInput; activeMicButton = btn; recognition.start();
                    });
                });
            } else {
                row.querySelectorAll('.speech-to-text-btn').forEach(btn => btn.style.display = 'none');
            }

            const updateInputStyle = (input) => {
                if (!input) return;
                const value = parseFloat(input.value);
                input.classList.toggle('text-red-500', !isNaN(value) && value < 0);
                input.classList.toggle('font-bold', !isNaN(value) && value < 0);
            };

            const calculateUyen = () => {
                const viValue = parseFloat(viPlayerInput.value), phuValue = parseFloat(phuPlayerInput.value);
                uyenPlayerInput.value = (!isNaN(viValue) && !isNaN(phuValue)) ? -(viValue + phuValue) : '';
                updateInputStyle(uyenPlayerInput);
            };

            viPlayerInput.addEventListener('input', () => { updateInputStyle(viPlayerInput); calculateUyen(); });
            phuPlayerInput.addEventListener('input', () => { updateInputStyle(phuPlayerInput); calculateUyen(); });
        }
    </script>
</body>
</html>



